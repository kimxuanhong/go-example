// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/kimxuanhong/go-example/internal/domain/validator"
	"github.com/kimxuanhong/go-example/internal/facade"
	"github.com/kimxuanhong/go-example/internal/infrastructure/client"
	"github.com/kimxuanhong/go-example/internal/infrastructure/repository"
	"github.com/kimxuanhong/go-example/internal/interface/handler"
	"github.com/kimxuanhong/go-example/internal/usecase"
	"github.com/kimxuanhong/go-example/pkg"
	client2 "github.com/kimxuanhong/go-http/client"
	"github.com/kimxuanhong/go-http/server"
	"github.com/kimxuanhong/go-postgres/postgres"
	"github.com/kimxuanhong/go-redis/redis"
	"github.com/kimxuanhong/go-utils/config"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	config, err := LoadConfig()
	if err != nil {
		return nil, err
	}
	server, err := InitHttpServer(config)
	if err != nil {
		return nil, err
	}
	mainPostgres, err := InitPostgres(config)
	if err != nil {
		return nil, err
	}
	replicaPostgres, err := InitReplicaPostgres(config)
	if err != nil {
		return nil, err
	}
	redis, err := InitRedis(config)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepo(mainPostgres, replicaPostgres, redis)
	accountClient := InitAccountClient(config)
	clientAccountClient := client.NewAccountClient(accountClient)
	consumerClient := InitConsumerClient(config)
	clientConsumerClient := client.NewConsumerClient(consumerClient)
	userValidator := validator.NewUserValidator()
	userUsecase := usecase.NewUserUsecase(userRepository, clientAccountClient, clientConsumerClient, userValidator)
	userFacade := facade.NewUserFacade(userUsecase)
	userHandler := handler.NewUserHandler(userFacade)
	app := &App{
		Cfg:         config,
		Server:      server,
		UserHandler: userHandler,
	}
	return app, nil
}

// wire.go:

type Config struct {
	Server          *server.Config   `yaml:"server"`
	Redis           *redis.Config    `yaml:"redis,omitempty"`
	Postgres        *postgres.Config `yaml:"postgres,omitempty"`
	ReplicaPostgres *postgres.Config `yaml:"replica_postgres,omitempty"`
	AccountClient   *client2.Config  `yaml:"account_client,omitempty"`
	ConsumerClient  *client2.Config  `yaml:"consumer_client,omitempty"`
}

type App struct {
	Cfg         *Config
	Server      server.Server
	UserHandler *handler.UserHandler
}

// ConfigSet chứa các provider liên quan đến cấu hình
var ConfigSet = wire.NewSet(
	LoadConfig,
	InitHttpServer,
)

// DatabaseSet chứa các provider liên quan đến database
var DatabaseSet = wire.NewSet(
	InitPostgres,
	InitReplicaPostgres,
	InitRedis,
)

// ClientSet chứa các provider liên quan đến HTTP clients
var ClientSet = wire.NewSet(
	InitAccountClient,
	InitConsumerClient, client.NewAccountClient, client.NewConsumerClient,
)

// RepositorySet chứa các provider liên quan đến repositories
var RepositorySet = wire.NewSet(repository.NewUserRepo)

// UsecaseSet chứa các provider liên quan đến usecases và facades
var UsecaseSet = wire.NewSet(validator.NewUserValidator, usecase.NewUserUsecase, facade.NewUserFacade)

// HandlerSet chứa các provider liên quan đến handlers
var HandlerSet = wire.NewSet(handler.NewUserHandler)

// LoadConfig tạo một provider cho config
func LoadConfig() (*Config, error) {
	cfg, err := config.LoadConfig[Config]()
	if err != nil {
		return nil, err
	}
	return cfg, nil
}

// InitHttpServer khởi tạo HTTP server từ cấu hình
func InitHttpServer(cfg *Config) (server.Server, error) {
	return server.NewServer(cfg.Server), nil
}

// InitPostgres khởi tạo Postgres nếu có config postgres
func InitPostgres(cfg *Config) (pkg.MainPostgres, error) {
	return postgres.NewPostgres(cfg.Postgres)
}

// InitReplicaPostgres khởi tạo Replica Postgres nếu có config
func InitReplicaPostgres(cfg *Config) (pkg.ReplicaPostgres, error) {
	return postgres.NewPostgres(cfg.ReplicaPostgres)
}

// InitRedis khởi tạo Redis nếu có config redis
func InitRedis(cfg *Config) (redis.Redis, error) {
	return redis.NewRedis(cfg.Redis)
}

// InitAccountClient khởi tạo Account HTTP client
func InitAccountClient(cfg *Config) pkg.AccountClient {
	return client2.NewClient(cfg.AccountClient)
}

// InitConsumerClient khởi tạo Consumer HTTP client
func InitConsumerClient(cfg *Config) pkg.ConsumerClient {
	return client2.NewClient(cfg.ConsumerClient)
}
